문제
당신은 어떤 게임의 플레이어입니다.이 게임에서는 과금 아이템 사용자 아이디가 공개되기 때문에 
개인적인 관심으로 과금 아이템 사용횟수가 가장 많은 사람을 알아보려고 합니다.
플레이어 ID가 정수로 주어지므로, 가장 많이 출현하는 플레이어 ID를 출력해 주세요.
가장 많이 출현하는 플레이어 ID가 여러 개 있으면 오름차순으로 모두 출력해 주세요.
입력 예1의 경우, 1이 2개, 2가 2개, 3이 1개 이며, 가장 많이 출현하는 아이디가
1, 2 두 개이기 때문에 '12'라고 출력해 주세요.
입력 예2의 경우, 1이 3개, 2가 1개, 3이 1개 이며, 가장 많이 출현하는 아이디가
1 뿐이므로 1 을 출력해 주세요.
입력되는 값
입력은 다음 형식으로 제공됩니다.
N
a_1a_2... a_N
1행째에 공개된 과금 아이템이 사용된 횟수를 나타내는 정수 N이 주어집니다.
2행째에, N개의 정수가 반각스페이스 구획으로 주어집니다.
i열목(1≦) i ≦ N) 정수 a_i는 i번째로 과금 아이템을 사용한 플레이어 ID를 나타냅니다.
입력은 합계 2행이며, 최종행의 말미에 개행이 하나들어갑니다.
각각의 값은 문자열로 표준 입력으로부터 전달됩니다.
기대 출력
주어진 아이디 중 가장 많이 출현하는 아이디를 출력하세요.
가장 많이 출현하다 ID가 여러 개 존재하는 경우에는 오름차순으로 공백 구분으로 출력해 주십시오.
출력의 마지막에 개행을 넣고, 불필요한 문자, 빈 행을 포함해서는 안됩니다.

조건
모든 테스트 케이스에서 아래의 조건을 충족합니다.
· 1 <= N <= 1,000
· 1 <= a_i <= 10,000 (1 <= i <= N)

입력 예시 1
5
1 1 2 2 3
출력 예1
1 2
입력 예시 2
5
1 2 3 1 1
출력 예2
1

코드

import java.util.*;

public class C043 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int cashItemCount = Integer.parseInt(sc.next());
//        int cashItemCount = (new Random().nextInt(1000) + 1);
//        System.out.println("N: " + cashItemCount);
        List<String> playerIDList = new ArrayList<>();
        for (int i = 0; i < cashItemCount; i++) {
//            playerIDList.add(Integer.toString((new Random().nextInt(10000) + 1)));
            playerIDList.add(sc.next());
        }

        Set<String> playerIDSet = new HashSet<String>(playerIDList);
//        System.out.println("IDSet: " + playerIDSet.size());
//        System.out.println("N - IDSet = " + (cashItemCount - playerIDSet.size()));
        List<String> frequencyIDList = new ArrayList<>();
        List<Integer> frequencyValue = new ArrayList<>();
        for (String id : playerIDSet) {
            frequencyIDList.add(id);
            frequencyValue.add(Collections.frequency(playerIDList, id));
//            System.out.println("ID: " + id + " Frequency: " + Collections.frequency(playerIDList, id));
        }
        List<Integer> maxValList = new ArrayList<>();
        // int cycleCount = 0;
//        int maxValue = Collections.max(frequencyValue);
//        List<Integer> freValCount = new ArrayList<>();
//        List<List<Integer>> freIDVal = new ArrayList<>();
//        List<Integer> dum = new ArrayList<>();
//
//        for (int i = 1; i < maxValue + 1 ; i++) {
//            freValCount.add(i);
//        }
//        for (int j = 0; j < freValCount.size() ; j++) {
//            dum.clear();
//            for (int i = 0; i < frequencyIDList.size(); i++) {
//                if(frequencyValue.get(i) == freValCount.get(j)) {
//                    dum.add(Integer.parseInt(frequencyIDList.get(i)));
//                }
//            }
//            freIDVal.add(dum);
//            System.out.println("Value: "+ freValCount.get(j) + " ID Count = " + dum.size());
//        }

        for (int i = 0; i < frequencyIDList.size(); i++) {
            if(frequencyValue.get(i) == Collections.max(frequencyValue)) {
                maxValList.add(Integer.parseInt(frequencyIDList.get(i)));
                // cycleCount++;
//        		System.out.println("max ID[" + (cycleCount) + "]: " + frequencyIDList.get(i));
//        		System.out.println("max Value: " + frequencyValue.get(i));
            }
        }
        Collections.sort(maxValList);
        for (int i = 0; i < maxValList.size(); i++) {
            if(i == (maxValList.size() - 1)) {
                System.out.print(maxValList.get(i));
            } else {
                System.out.print(maxValList.get(i) + " ");
            }
        }
    }
}